{"version":3,"sources":["utils/searchHelper.ts","types/Sex.ts","components/LinksForCentury.tsx","components/PeopleFilters.tsx","components/Loader/Loader.tsx","components/PesonLink/PersonLink.tsx","types/SortParams.ts","components/PeopleTable.tsx","api.ts","components/PeoplePage.tsx","components/Navbar.tsx","components/HomePage/HomePage.tsx","components/NotFoundPage/NotFoundPage.tsx","App.tsx","index.tsx"],"names":["getSearchWith","currentParams","paramsToUpdate","newParams","URLSearchParams","toString","Object","entries","forEach","key","value","delete","Array","isArray","part","append","set","Sex","startedCenturies","LinksForCentury","useSearchParams","searchParams","location","useLocation","centuries","getAll","handlerCenturiesChange","ch","includes","filter","cen","className","map","century","classNames","to","pathname","search","length","PeopleFilters","React","memo","people","onSetFilteredPeople","setSearchParams","query","get","sex","useEffect","person","correctQuery","trim","toLocaleLowerCase","name","motherName","fatherName","undefined","born","bornCentury","Math","ceil","Empty","Male","Female","type","placeholder","onChange","event","target","Loader","PersonLink","died","slug","personLink","useParams","getParentLink","parentName","parent","find","p","SortParams","PeopleTable","filteredPeople","useState","sortedFilteredPeople","setSortedFilteredPeople","sortParam","order","handlerSortPeopleBy","sortParams","sort","personA","personB","valueA","valueB","localeCompare","getSearchSortBy","useMemo","sortedPeople","Name","Born","Died","reverse","getSortedPeople","API_URL","wait","delay","Promise","resolve","setTimeout","then","fetch","response","json","PeoplePage","setPeople","errMess","setErrMess","setFilteredPeople","getPeople","peoplefromServer","catch","getClassForLinkPages","isActive","Navbar","role","HomePage","NotFoundPage","App","path","index","element","replace","createRoot","document","getElementById","render"],"mappings":"wRAIO,SAASA,EACdC,EACAC,GAEA,IAAMC,EAAY,IAAIC,gBACpBH,EAAcI,YA6BhB,OAfAC,OAAOC,QAAQL,GACZM,SAAQ,YAAmB,IAAD,mBAAhBC,EAAgB,KAAXC,EAAW,KACX,OAAVA,EACFP,EAAUQ,OAAOF,GACRG,MAAMC,QAAQH,IACvBP,EAAUQ,OAAOF,GAEjBC,EAAMF,SAAQ,SAAAM,GACZX,EAAUY,OAAON,EAAKK,EACvB,KAEDX,EAAUa,IAAIP,EAAKC,EAEtB,IAEIP,EAAUE,UAClB,CCvCM,IAAKY,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,SAAYA,EAAZ,SAAYA,EAAZ,WAAYA,CAAZ,M,OCIMC,EAAmB,CAAC,KAAM,KAAM,KAAM,KAAM,MAErCC,EAA4B,WACvC,MAAuBC,cAAhBC,EAAP,oBACMC,EAAWC,cAEXC,EAAYH,EAAaI,OAAO,cAAgB,GAEhDC,EAAyB,SAACC,GAC9B,OAAIA,EACEH,EAAUI,SAASD,GACd3B,EACLqB,EACA,CAAEG,UAAW,YAAIA,GAAWK,QAAO,SAAAC,GAAG,OAAIA,IAAQH,CAAZ,KAAmB,KAItD3B,EAAcqB,EAAc,CAAEG,UAAU,GAAD,mBAAMA,GAAN,CAAiBG,MAG1D3B,EAAcqB,EAAc,CAAEG,UAAW,MACjD,EAED,OACE,qCACE,qBAAKO,UAAU,aAAf,SACGb,EAAiBc,KAAI,SAAAC,GAAO,OAC3B,cAAC,IAAD,CAEE,UAAQ,UACRF,UAAWG,IAAW,SAAU,OAAQ,CACtC,UAAWV,EAAUI,SAASK,KAEhCE,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQX,EAAuBO,IARnC,SAWGA,GAXH,kBACkBA,GAFS,MAiB/B,qBAAKF,UAAU,mBAAf,SACE,cAAC,IAAD,CACE,UAAQ,aACRA,UAAWG,IACT,SAAU,aAAc,CAAE,cAAeV,EAAUc,OAAS,IAE9DH,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQX,EAAuB,OAPnC,qBAgBP,ECnDYa,EAAiCC,IAAMC,MAAK,YAElD,IADLC,EACI,EADJA,OAAQC,EACJ,EADIA,oBAER,EAAwCvB,cAAxC,mBAAOC,EAAP,KAAqBuB,EAArB,KAEMC,EAAQxB,EAAayB,IAAI,UAAY,GACrCtB,EAAYH,EAAaI,OAAO,cAAgB,GAChDsB,EAAM1B,EAAayB,IAAI,QAAU,GACjCxB,EAAWC,cAuDjB,OAJAyB,qBAAU,WACRL,EAjDO,YAAID,GACRb,QAAO,SAAAoB,GACN,IAAMC,EAAeL,EAAMM,OAAOC,oBAC1BC,EAAiCJ,EAAjCI,KAAMC,EAA2BL,EAA3BK,WAAYC,EAAeN,EAAfM,WAE1B,OAAIL,KACiB,OAAfI,IACCA,EAAWF,oBAAoBxB,SAASsB,OAK1B,OAAfK,IACCA,EAAWH,oBAAoBxB,SAASsB,KAKtCG,EAAKD,oBAAoBxB,SAASsB,EAI5C,IACArB,QAAO,SAAAoB,GACN,OAAIF,GACKE,EAAOF,MAAQA,CAIzB,IACAlB,QAAO,SAAAoB,GACN,QAAkBO,IAAdhC,GAA2BA,EAAUc,OAAS,EAAG,CACnD,IAAQmB,EAASR,EAATQ,KACFC,EAAcC,KAAKC,MAAMH,EAAO,KAEtC,OAAOjC,EAAUI,SAAS8B,EAAYrD,WACvC,CAED,OAAO,CACR,IAWJ,GAAE,CAACgB,IAGF,sBAAKU,UAAU,QAAf,UACE,mBAAGA,UAAU,gBAAb,qBAEA,oBAAGA,UAAU,aAAa,UAAQ,YAAlC,UACE,cAAC,IAAD,CACEA,UAAWG,IAAW,CAAE,YAAaa,IAAQ9B,EAAI4C,QACjD1B,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQrC,EAAcqB,EAAc,CAAE0B,IAAK,QAJ/C,iBAUA,cAAC,IAAD,CACEhB,UAAWG,IAAW,CAAE,YAAaa,IAAQ9B,EAAI6C,OACjD3B,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQrC,EAAcqB,EAAc,CAAE0B,IAAK9B,EAAI6C,QAJnD,kBAUA,cAAC,IAAD,CACE/B,UAAWG,IAAW,CAAE,YAAaa,IAAQ9B,EAAI8C,SACjD5B,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQrC,EAAcqB,EAAc,CAAE0B,IAAK9B,EAAI8C,UAJnD,uBAWF,qBAAKhC,UAAU,cAAf,SACE,oBAAGA,UAAU,yBAAb,UACE,uBACE,UAAQ,aACRiC,KAAK,SACLjC,UAAU,QACVkC,YAAY,SACZvD,MAAOmC,EACPqB,SAtDiB,SAACC,GAC1B,IAAMhE,EAAY,CAAE0C,MAAOsB,EAAMC,OAAO1D,OAAS,MAEjDkC,EAAgB5C,EAAcqB,EAAclB,GAC7C,IAqDO,sBAAM4B,UAAU,eAAhB,SACE,mBAAGA,UAAU,gBAAgB,cAAY,gBAK/C,qBAAKA,UAAU,cAAf,SACE,qBAAKA,UAAU,iCAAiC,UAAQ,gBAAxD,SACE,cAAC,EAAD,QAIJ,qBAAKA,UAAU,cAAf,SACE,cAAC,IAAD,CACEA,UAAU,0CACVI,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQrC,EAAcqB,EAAc,CAClC0B,IAAK,KACLvB,UAAW,KACXqB,MAAO,QAPb,mCAgBP,ICtJYwB,G,MAAS,kBACpB,qBAAKtC,UAAU,SAAS,UAAQ,SAAhC,SACE,qBAAKA,UAAU,qBAFG,GCQTuC,EAA8B,SAAC,GAAwB,IAAtBrB,EAAqB,EAArBA,OAAQP,EAAa,EAAbA,OAElDW,EAOEJ,EAPFI,KACAN,EAMEE,EANFF,IACAU,EAKER,EALFQ,KACAc,EAIEtB,EAJFsB,KACAhB,EAGEN,EAHFM,WACAD,EAEEL,EAFFK,WACAkB,EACEvB,EADFuB,KAGMC,EAAeC,cAAfD,WACR,EAAuBrD,cAAhBC,EAAP,oBAEMsD,EAAgB,SAACC,GACrB,IAAMC,EAASnC,EAAOoC,MAAK,SAAAC,GAAC,OAAIA,EAAE1B,OAASuB,CAAf,IAE5B,OAAIC,EAEA,cAAC,IAAD,CACE1C,GAAI,CACFC,SAAS,WAAD,OAAayC,EAAOL,MAC5BnC,OAAQhB,EAAahB,YAEvB0B,UAAWG,IACT,CAAE,kBAAmB2C,EAAO9B,MAAQ9B,EAAI8C,SAN5C,SASGc,EAAOxB,OAKPuB,GAAc,GACtB,EAED,OACE,qBACE,UAAQ,SACR7C,UAAWG,IACT,CAAE,yBAA0BsC,IAASC,IAHzC,UAME,6BACE,cAAC,IAAD,CACEtC,GAAI,CACFC,SAAS,WAAD,OAAaoC,GACrBnC,OAAQhB,EAAahB,YAEvB0B,UAAWG,IACT,CAAE,kBAAmBa,IAAQ9B,EAAI8C,SANrC,SASGV,MAIL,6BAAKN,IACL,6BAAKU,IACL,6BAAKc,IACL,6BACGI,EAAcrB,KAEjB,6BACGqB,EAAcpB,OAItB,EC9EWyB,EAAZ,SAAYA,GAAZ,OAAYA,EAAZ,YAAYA,EAAZ,UAAYA,EAAZ,YAAYA,EAAZ,YAAYA,CAAZ,MCaaC,EAA+B,SAAC,GAEtC,IADLvC,EACI,EADJA,OAAQwC,EACJ,EADIA,eAER,EAEIC,mBAAmBD,GAFvB,mBACEE,EADF,KACwBC,EADxB,KAIA,EAAuBjE,cAAhBC,EAAP,oBACMC,EAAWC,cAEX+D,EAAYjE,EAAayB,IAAI,SAAW,GACxCyC,EAAQlE,EAAayB,IAAI,UAAY,GAErC0C,EAAsB,SAACC,GAC3B,OAAO,YAAIP,GAAgBQ,MAAK,SAACC,EAASC,GACxC,GAAmC,kBAAxBD,EAAQF,GAA0B,CAC3C,IAAMI,EAASF,EAAQF,GAAYpF,WAC7ByF,EAASF,EAAQH,GAAYpF,WAEnC,OAAOwF,EAAOE,cAAcD,EAC7B,CAKD,OAHgBH,EAAQF,IACRG,EAAQH,EAGzB,GACF,EAiCKO,EAAkB,SAACvF,GACvB,OACST,EAAcqB,EADnBiE,IAAc7E,EACmB,CAAEiF,KAAMjF,EAAK8E,MAAO,MAGhDA,EAEuB,CAAEG,KAAM,KAAMH,MAAO,MADrB,CAAEA,MAAO,QAE1C,EAMD,OAJAU,mBAAQ,WACNZ,EA1CsB,WACtB,IAAIa,EAAehB,EAEnB,GAAII,EAAW,CACb,OAAQA,GACN,KAAKN,EAAWmB,KACdD,EAAeV,EAAoBR,EAAWmB,MAC9C,MAEF,KAAKnB,EAAW/D,IACdiF,EAAeV,EAAoBR,EAAW/D,KAC9C,MAEF,KAAK+D,EAAWoB,KACdF,EAAeV,EAAoBR,EAAWoB,MAC9C,MAEF,KAAKpB,EAAWqB,KACdH,EAAeV,EAAoBR,EAAWqB,MAC9C,MAEF,QACEH,EAAehB,EAGnB,OAAOK,EAAQW,EAAaI,UAAYJ,CACzC,CAED,OAAOA,CACR,CAayBK,GACzB,GAAE,CAAClF,EAAc6D,IAGhB,wBACE,UAAQ,cACRnD,UAAU,uDAFZ,UAIE,gCACE,+BACE,6BACE,uBAAMA,UAAU,+BAAhB,iBAEE,cAAC,IAAD,CACEI,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQ2D,EAAgB,SAH5B,SAME,sBAAMjE,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IACZ,MACA,CAAE,UAAWoD,IAAcN,EAAWmB,MACtC,CAAE,aAAcb,IAAcN,EAAWmB,OAASZ,GAClD,CAAE,eAAgBD,IAAcN,EAAWmB,MAAQZ,eAQ7D,6BACE,uBAAMxD,UAAU,+BAAhB,gBAEE,cAAC,IAAD,CACEI,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQ2D,EAAgB,QAH5B,SAME,sBAAMjE,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IACZ,MACA,CAAE,UAAWoD,IAAcN,EAAW/D,KACtC,CAAE,aAAcqE,IAAcN,EAAW/D,MAAQsE,GACjD,CAAE,eAAgBD,IAAcN,EAAW/D,KAAOsE,eAQ5D,6BACE,uBAAMxD,UAAU,+BAAhB,iBAEE,cAAC,IAAD,CACEI,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQ2D,EAAgB,SAH5B,SAME,sBAAMjE,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IACZ,MACA,CAAE,UAAWoD,IAAcN,EAAWoB,MACtC,CAAE,aAAcd,IAAcN,EAAWoB,OAASb,GAClD,CAAE,eAAgBD,IAAcN,EAAWoB,MAAQb,eAQ7D,6BACE,uBAAMxD,UAAU,+BAAhB,iBAEE,cAAC,IAAD,CACEI,GAAI,CACFC,SAAUd,EAASc,SACnBC,OAAQ2D,EAAgB,SAH5B,SAME,sBAAMjE,UAAU,OAAhB,SACE,mBAAGA,UAAWG,IACZ,MACA,CAAE,UAAWoD,IAAcN,EAAWqB,MACtC,CAAE,aAAcf,IAAcN,EAAWqB,OAASd,GAClD,CAAE,eAAgBD,IAAcN,EAAWqB,MAAQd,eAQ7D,wCACA,6CAIJ,gCACGH,EAAqBpD,KAAI,SAAAiB,GAAM,OAC9B,cAAC,EAAD,CAEEP,OAAQA,EACRO,OAAQA,GAFHA,EAAOuB,KAFgB,QAUvC,E,cCnMKgC,EAAU,oEAEhB,SAASC,EAAKC,GACZ,OAAO,IAAIC,SAAQ,SAAAC,GAAO,OAAIC,WAAWD,EAASF,EAAxB,GAC3B,C,sDAEM,iHACED,EAAK,KACTK,MAAK,kBAAMC,MAAMP,EAAZ,IACLM,MAAK,SAAAE,GAAQ,OAAIA,EAASC,MAAb,KAHX,4C,sBCFA,IAAMC,EAAa,WACxB,MAA4B/B,mBAA0B,MAAtD,mBAAOzC,EAAP,KAAeyE,EAAf,KACA,EAA8BhC,oBAAkB,GAAhD,mBAAOiC,EAAP,KAAgBC,EAAhB,KACA,EAA4ClC,mBAAmB,IAA/D,mBAAOD,EAAP,KAAuBoC,EAAvB,KAaA,OAXAtE,qBAAU,YDHL,WAAP,gCCIIuE,GACGT,MAAM,SAAAU,GACLL,EAAUK,GACVF,EAAkBE,EACnB,IACAC,OAAM,WACLJ,GAAW,EACZ,GACJ,GAAE,IAGD,qCACE,oBAAItF,UAAU,QAAd,yBAEA,qBAAKA,UAAU,QAAf,SACE,sBAAKA,UAAU,mDAAf,UACE,qBAAKA,UAAU,uCAAf,SACc,OAAXW,GAAmBA,EAAOJ,OAAS,GAClC,cAACC,EAAD,CACEG,OAAQA,EACRC,oBAAqB2E,MAK3B,qBAAKvF,UAAU,SAAf,SACE,sBAAKA,UAAU,sBAAf,UACc,OAAXW,IAA+B,IAAZ0E,GAAsB,cAAC,EAAD,IAC9B,OAAX1E,GAAmBwC,EAAe5C,OAAS,GAC1C,cAAC,EAAD,CACEI,OAAQA,EACRwC,eAAgBA,IAInBkC,GACC,mBAAG,UAAQ,qBAAX,kCAKU,OAAX1E,GAAmBA,EAAOJ,OAAS,GAClC,mBAAG,UAAQ,kBAAX,+CAKU,OAAXI,GAAmBwC,EAAe5C,OAAS,GAC1C,qGAQf,EClEKoF,EAAuB,SAAC,GAAyC,IAAvCC,EAAsC,EAAtCA,SAC9B,OAAOzF,IAAW,cAAe,CAAE,8BAA+ByF,GACnE,EAEYC,EAAS,WACpB,OACE,qBACE,UAAQ,MACR7F,UAAU,iCACV8F,KAAK,aACL,aAAW,kBAJb,SAME,qBAAK9F,UAAU,YAAf,SACE,sBAAKA,UAAU,eAAf,UACE,cAAC,IAAD,CAASI,GAAG,IAAIJ,UAAW2F,EAA3B,kBACA,cAAC,IAAD,CACE,eAAa,OACbvF,GAAG,UACHJ,UAAW2F,EAHb,0BAWT,EC7BYI,G,MAAW,kBACtB,oBAAI/F,UAAU,QAAd,sBADsB,GCAXgG,EAAe,kBAC1B,oBAAIhG,UAAU,QAAd,2BAD0B,ECUfiG,EAAM,WACjB,OACE,sBAAK,UAAQ,MAAb,UACE,cAAC,EAAD,IAEA,qBAAKjG,UAAU,UAAf,SACE,qBAAKA,UAAU,YAAf,SACE,cAAC,IAAD,UACE,eAAC,IAAD,CAAOkG,KAAK,IAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOF,KAAK,QAAQE,QAAS,cAAC,IAAD,CAAUhG,GAAG,IAAIiG,SAAO,MAErD,eAAC,IAAD,CAAOH,KAAK,SAAZ,UACE,cAAC,IAAD,CAAOC,OAAK,EAACC,QAAS,cAAC,EAAD,MACtB,cAAC,IAAD,CAAOF,KAAK,cAAcE,QAAS,cAAC,EAAD,SAGrC,cAAC,IAAD,CAAOF,KAAK,IAAIE,QAAS,cAAC,EAAD,iBAOtC,EC1BDE,qBAAWC,SAASC,eAAe,SAChCC,OACC,cAAC,IAAD,UACE,cAAC,EAAD,M","file":"static/js/main.42152c53.chunk.js","sourcesContent":["export type SearchParams = {\n  [key: string]: string | string[] | null,\n};\n\nexport function getSearchWith(\n  currentParams: URLSearchParams,\n  paramsToUpdate: SearchParams, // it's our custom type\n): string {\n  const newParams = new URLSearchParams(\n    currentParams.toString(),\n  );\n\n  // Here is the example of paramsToUpdate\n  // {\n  //   sex: 'm',                ['sex', 'm']\n  //   order: null,             ['order', null]\n  //   centuries: ['16', '19'], ['centuries', ['16', '19']]\n  // }\n  //\n  // - params with the `null` value are deleted;\n  // - string value is set to given param key;\n  // - array of strings adds several params with the same key;\n\n  Object.entries(paramsToUpdate)\n    .forEach(([key, value]) => {\n      if (value === null) {\n        newParams.delete(key);\n      } else if (Array.isArray(value)) {\n        newParams.delete(key);\n\n        value.forEach(part => {\n          newParams.append(key, part);\n        });\n      } else {\n        newParams.set(key, value);\n      }\n    });\n\n  return newParams.toString();\n}\n","export enum Sex {\n  Empty = '',\n  Male = 'm',\n  Female = 'f',\n}\n","import { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { getSearchWith } from '../utils/searchHelper';\n\nconst startedCenturies = ['16', '17', '18', '19', '20'];\n\nexport const LinksForCentury: React.FC = () => {\n  const [searchParams] = useSearchParams();\n  const location = useLocation();\n\n  const centuries = searchParams.getAll('centuries') || [];\n\n  const handlerCenturiesChange = (ch: string | null) => {\n    if (ch) {\n      if (centuries.includes(ch)) {\n        return getSearchWith(\n          searchParams,\n          { centuries: [...centuries].filter(cen => cen !== ch) || [] },\n        );\n      }\n\n      return getSearchWith(searchParams, { centuries: [...centuries, ch] });\n    }\n\n    return getSearchWith(searchParams, { centuries: null });\n  };\n\n  return (\n    <>\n      <div className=\"level-left\">\n        {startedCenturies.map(century => (\n          <Link\n            key={`century-${century}`}\n            data-cy=\"century\"\n            className={classNames('button', 'mr-1', {\n              'is-info': centuries.includes(century),\n            })}\n            to={{\n              pathname: location.pathname,\n              search: handlerCenturiesChange(century),\n            }}\n          >\n            {century}\n          </Link>\n        ))}\n      </div>\n\n      <div className=\"level-right ml-4\">\n        <Link\n          data-cy=\"centuryALL\"\n          className={classNames(\n            'button', 'is-success', { 'is-outlined': centuries.length > 0 },\n          )}\n          to={{\n            pathname: location.pathname,\n            search: handlerCenturiesChange(null),\n          }}\n        >\n          All\n        </Link>\n      </div>\n    </>\n\n  );\n};\n","import { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport React, { useEffect } from 'react';\nimport classNames from 'classnames';\nimport { Person } from '../types';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { Sex } from '../types/Sex';\nimport { LinksForCentury } from './LinksForCentury';\n\ntype Props = {\n  people: Person[],\n  onSetFilteredPeople: (newPeople: Person[]) => void,\n};\n\nexport const PeopleFilters: React.FC<Props> = React.memo(({\n  people, onSetFilteredPeople,\n}) => {\n  const [searchParams, setSearchParams] = useSearchParams();\n\n  const query = searchParams.get('query') || '';\n  const centuries = searchParams.getAll('centuries') || [];\n  const sex = searchParams.get('sex') || '';\n  const location = useLocation();\n\n  const getFilteredPeople = () => {\n    return [...people]\n      .filter(person => { // FiltredPeopleByQuery\n        const correctQuery = query.trim().toLocaleLowerCase();\n        const { name, motherName, fatherName } = person;\n\n        if (correctQuery) {\n          if (motherName !== null\n            && motherName.toLocaleLowerCase().includes(correctQuery)\n          ) {\n            return true;\n          }\n\n          if (fatherName !== null\n            && fatherName.toLocaleLowerCase().includes(correctQuery)\n          ) {\n            return true;\n          }\n\n          return name.toLocaleLowerCase().includes(correctQuery);\n        }\n\n        return true;\n      })\n      .filter(person => { // FiltredPeopleBySex\n        if (sex) {\n          return person.sex === sex;\n        }\n\n        return true;\n      })\n      .filter(person => { // FiltredPeopleByCentury\n        if (centuries !== undefined && centuries.length > 0) {\n          const { born } = person;\n          const bornCentury = Math.ceil(+born / 100);\n\n          return centuries.includes(bornCentury.toString());\n        }\n\n        return true;\n      });\n  };\n\n  const handlerQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const newParams = { query: event.target.value || null };\n\n    setSearchParams(getSearchWith(searchParams, newParams));\n  };\n\n  useEffect(() => {\n    onSetFilteredPeople(getFilteredPeople());\n  }, [searchParams]);\n\n  return (\n    <nav className=\"panel\">\n      <p className=\"panel-heading\">Filters</p>\n\n      <p className=\"panel-tabs\" data-cy=\"SexFilter\">\n        <Link\n          className={classNames({ 'is-active': sex === Sex.Empty })}\n          to={{\n            pathname: location.pathname,\n            search: getSearchWith(searchParams, { sex: null }),\n          }}\n        >\n          All\n        </Link>\n\n        <Link\n          className={classNames({ 'is-active': sex === Sex.Male })}\n          to={{\n            pathname: location.pathname,\n            search: getSearchWith(searchParams, { sex: Sex.Male }),\n          }}\n        >\n          Male\n        </Link>\n\n        <Link\n          className={classNames({ 'is-active': sex === Sex.Female })}\n          to={{\n            pathname: location.pathname,\n            search: getSearchWith(searchParams, { sex: Sex.Female }),\n          }}\n        >\n          Female\n        </Link>\n      </p>\n\n      <div className=\"panel-block\">\n        <p className=\"control has-icons-left\">\n          <input\n            data-cy=\"NameFilter\"\n            type=\"search\"\n            className=\"input\"\n            placeholder=\"Search\"\n            value={query}\n            onChange={handlerQueryChange}\n          />\n\n          <span className=\"icon is-left\">\n            <i className=\"fas fa-search\" aria-hidden=\"true\" />\n          </span>\n        </p>\n      </div>\n\n      <div className=\"panel-block\">\n        <div className=\"level is-flex-grow-1 is-mobile\" data-cy=\"CenturyFilter\">\n          <LinksForCentury />\n        </div>\n      </div>\n\n      <div className=\"panel-block\">\n        <Link\n          className=\"button is-link is-outlined is-fullwidth\"\n          to={{\n            pathname: location.pathname,\n            search: getSearchWith(searchParams, {\n              sex: null,\n              centuries: null,\n              query: null,\n            }),\n          }}\n        >\n          Reset all filters\n        </Link>\n      </div>\n    </nav>\n  );\n});\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Link, useParams, useSearchParams } from 'react-router-dom';\nimport classNames from 'classnames';\nimport { Person } from '../../types';\nimport { Sex } from '../../types/Sex';\n\ntype Props = {\n  people: Person[]\n  person: Person,\n};\n\nexport const PersonLink: React.FC<Props> = ({ person, people }) => {\n  const {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n  } = person;\n\n  const { personLink } = useParams();\n  const [searchParams] = useSearchParams();\n\n  const getParentLink = (parentName: string | null) => {\n    const parent = people.find(p => p.name === parentName);\n\n    if (parent) {\n      return (\n        <Link\n          to={{\n            pathname: `/people/${parent.slug}`,\n            search: searchParams.toString(),\n          }}\n          className={classNames(\n            { 'has-text-danger': parent.sex === Sex.Female },\n          )}\n        >\n          {parent.name}\n        </Link>\n      );\n    }\n\n    return parentName || '-';\n  };\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames(\n        { 'has-background-warning': slug === personLink },\n      )}\n    >\n      <td>\n        <Link\n          to={{\n            pathname: `/people/${slug}`,\n            search: searchParams.toString(),\n          }}\n          className={classNames(\n            { 'has-text-danger': sex === Sex.Female },\n          )}\n        >\n          {name}\n        </Link>\n      </td>\n\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {getParentLink(motherName)}\n      </td>\n      <td>\n        {getParentLink(fatherName)}\n      </td>\n    </tr>\n  );\n};\n","export enum SortParams {\n  Name = 'name',\n  Sex = 'sex',\n  Born = 'born',\n  Died = 'died',\n}\n","import classNames from 'classnames';\nimport { Link, useLocation, useSearchParams } from 'react-router-dom';\nimport React, { useMemo, useState } from 'react';\nimport { Person } from '../types';\nimport { PersonLink } from './PesonLink';\nimport { getSearchWith } from '../utils/searchHelper';\nimport { SortParams } from '../types/SortParams';\n\ntype Props = {\n  people: Person[],\n  filteredPeople: Person[],\n};\n\nexport const PeopleTable: React.FC<Props> = ({\n  people, filteredPeople,\n}) => {\n  const [\n    sortedFilteredPeople, setSortedFilteredPeople,\n  ] = useState<Person[]>(filteredPeople);\n\n  const [searchParams] = useSearchParams();\n  const location = useLocation();\n\n  const sortParam = searchParams.get('sort') || '';\n  const order = searchParams.get('order') || '';\n\n  const handlerSortPeopleBy = (sortParams: SortParams) => {\n    return [...filteredPeople].sort((personA, personB) => {\n      if (typeof personA[sortParams] === 'string') {\n        const valueA = personA[sortParams].toString();\n        const valueB = personB[sortParams].toString();\n\n        return valueA.localeCompare(valueB);\n      }\n\n      const valueA = +personA[sortParams];\n      const valueB = +personB[sortParams];\n\n      return valueA - valueB;\n    });\n  };\n\n  const getSortedPeople = () => {\n    let sortedPeople = filteredPeople;\n\n    if (sortParam) {\n      switch (sortParam) {\n        case SortParams.Name:\n          sortedPeople = handlerSortPeopleBy(SortParams.Name);\n          break;\n\n        case SortParams.Sex:\n          sortedPeople = handlerSortPeopleBy(SortParams.Sex);\n          break;\n\n        case SortParams.Born:\n          sortedPeople = handlerSortPeopleBy(SortParams.Born);\n          break;\n\n        case SortParams.Died:\n          sortedPeople = handlerSortPeopleBy(SortParams.Died);\n          break;\n\n        default:\n          sortedPeople = filteredPeople;\n      }\n\n      return order ? sortedPeople.reverse() : sortedPeople;\n    }\n\n    return sortedPeople;\n  };\n\n  const getSearchSortBy = (key: string) => {\n    if (sortParam !== key) {\n      return getSearchWith(searchParams, { sort: key, order: null });\n    }\n\n    return (!order)\n      ? getSearchWith(searchParams, { order: 'desc' })\n      : getSearchWith(searchParams, { sort: null, order: null });\n  };\n\n  useMemo(() => {\n    setSortedFilteredPeople(getSortedPeople());\n  }, [searchParams, filteredPeople]);\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>\n            <span className=\"is-flex is-flex-wrap-no-wrap\">\n              Name\n              <Link\n                to={{\n                  pathname: location.pathname,\n                  search: getSearchSortBy('name'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'fas',\n                    { 'fa-sort': sortParam !== SortParams.Name },\n                    { 'fa-sort-up': sortParam === SortParams.Name && !order },\n                    { 'fa-sort-down': sortParam === SortParams.Name && order },\n                  )}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-no-wrap\">\n              Sex\n              <Link\n                to={{\n                  pathname: location.pathname,\n                  search: getSearchSortBy('sex'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'fas',\n                    { 'fa-sort': sortParam !== SortParams.Sex },\n                    { 'fa-sort-up': sortParam === SortParams.Sex && !order },\n                    { 'fa-sort-down': sortParam === SortParams.Sex && order },\n                  )}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-no-wrap\">\n              Born\n              <Link\n                to={{\n                  pathname: location.pathname,\n                  search: getSearchSortBy('born'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'fas',\n                    { 'fa-sort': sortParam !== SortParams.Born },\n                    { 'fa-sort-up': sortParam === SortParams.Born && !order },\n                    { 'fa-sort-down': sortParam === SortParams.Born && order },\n                  )}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>\n            <span className=\"is-flex is-flex-wrap-no-wrap\">\n              Died\n              <Link\n                to={{\n                  pathname: location.pathname,\n                  search: getSearchSortBy('died'),\n                }}\n              >\n                <span className=\"icon\">\n                  <i className={classNames(\n                    'fas',\n                    { 'fa-sort': sortParam !== SortParams.Died },\n                    { 'fa-sort-up': sortParam === SortParams.Died && !order },\n                    { 'fa-sort-down': sortParam === SortParams.Died && order },\n                  )}\n                  />\n                </span>\n              </Link>\n            </span>\n          </th>\n\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {sortedFilteredPeople.map(person => (\n          <PersonLink\n            key={person.slug}\n            people={people}\n            person={person}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport async function getPeople(): Promise<Person[]> {\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import { useEffect, useState } from 'react';\nimport { PeopleFilters } from './PeopleFilters';\nimport { Loader } from './Loader';\nimport { PeopleTable } from './PeopleTable';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\n\nexport const PeoplePage = () => {\n  const [people, setPeople] = useState<Person[] | null>(null);\n  const [errMess, setErrMess] = useState<boolean>(false);\n  const [filteredPeople, setFilteredPeople] = useState<Person[]>([]);\n\n  useEffect(() => {\n    getPeople()\n      .then((peoplefromServer => {\n        setPeople(peoplefromServer);\n        setFilteredPeople(peoplefromServer);\n      }))\n      .catch(() => {\n        setErrMess(true);\n      });\n  }, []);\n\n  return (\n    <>\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"columns is-desktop is-flex-direction-row-reverse\">\n          <div className=\"column is-7-tablet is-narrow-desktop\">\n            {people !== null && people.length > 0 && (\n              <PeopleFilters\n                people={people}\n                onSetFilteredPeople={setFilteredPeople}\n              />\n            )}\n          </div>\n\n          <div className=\"column\">\n            <div className=\"box table-container\">\n              {people === null && errMess === false && (<Loader />)}\n              {people !== null && filteredPeople.length > 0 && (\n                <PeopleTable\n                  people={people}\n                  filteredPeople={filteredPeople}\n                />\n              )}\n\n              {errMess && (\n                <p data-cy=\"peopleLoadingError\">\n                  Something went wrong\n                </p>\n              )}\n\n              {people !== null && people.length < 1 && (\n                <p data-cy=\"noPeopleMessage\">\n                  There are no people on the server\n                </p>\n              )}\n\n              {people !== null && filteredPeople.length < 1 && (\n                <p>There are no people matching the current search criteria</p>\n              )}\n            </div>\n          </div>\n        </div>\n      </div>\n    </>\n  );\n};\n","import classNames from 'classnames';\nimport { NavLink } from 'react-router-dom';\n\nconst getClassForLinkPages = ({ isActive }: { isActive: boolean }) => {\n  return classNames('navbar-item', { 'has-background-grey-lighter': isActive });\n};\n\nexport const Navbar = () => {\n  return (\n    <nav\n      data-cy=\"nav\"\n      className=\"navbar is-fixed-top has-shadow\"\n      role=\"navigation\"\n      aria-label=\"main navigation\"\n    >\n      <div className=\"container\">\n        <div className=\"navbar-brand\">\n          <NavLink to=\"/\" className={getClassForLinkPages}>Home</NavLink>\n          <NavLink\n            aria-current=\"page\"\n            to=\"/people\"\n            className={getClassForLinkPages}\n          >\n            People\n          </NavLink>\n        </div>\n      </div>\n    </nav>\n  );\n};\n","export const HomePage = () => (\n  <h1 className=\"title\">Home Page</h1>\n);\n","export const NotFoundPage = () => (\n  <h1 className=\"title\">Page not found</h1>\n);\n","import {\n  Routes, Route, Navigate,\n} from 'react-router-dom';\nimport { PeoplePage } from './components/PeoplePage';\nimport { Navbar } from './components/Navbar';\n\nimport './App.scss';\nimport { HomePage } from './components/HomePage';\nimport { NotFoundPage } from './components/NotFoundPage';\n\nexport const App = () => {\n  return (\n    <div data-cy=\"app\">\n      <Navbar />\n\n      <div className=\"section\">\n        <div className=\"container\">\n          <Routes>\n            <Route path=\"/\">\n              <Route index element={<HomePage />} />\n              <Route path=\"/home\" element={<Navigate to=\"/\" replace />} />\n\n              <Route path=\"people\">\n                <Route index element={<PeoplePage />} />\n                <Route path=\":personLink\" element={<PeoplePage />} />\n              </Route>\n\n              <Route path=\"*\" element={<NotFoundPage />} />\n            </Route>\n          </Routes>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport { HashRouter as Router } from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <App />\n    </Router>,\n  );\n"],"sourceRoot":""}